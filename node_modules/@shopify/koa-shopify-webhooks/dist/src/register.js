"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var network_1 = require("@shopify/network");
var types_1 = require("./types");
var ApiVersion;
(function (ApiVersion) {
    ApiVersion["April19"] = "2019-04";
    ApiVersion["July19"] = "2019-07";
    ApiVersion["October19"] = "2019-10";
    ApiVersion["January20"] = "2020-01";
    ApiVersion["April20"] = "2020-04";
    ApiVersion["July20"] = "2020-07";
    ApiVersion["October20"] = "2020-10";
    ApiVersion["Unstable"] = "unstable";
    ApiVersion["Unversioned"] = "unversioned";
})(ApiVersion = exports.ApiVersion || (exports.ApiVersion = {}));
var DeliveryMethod;
(function (DeliveryMethod) {
    DeliveryMethod["Http"] = "http";
    DeliveryMethod["EventBridge"] = "eventbridge";
})(DeliveryMethod = exports.DeliveryMethod || (exports.DeliveryMethod = {}));
function registerWebhook(_a) {
    var address = _a.address, topic = _a.topic, accessToken = _a.accessToken, shop = _a.shop, apiVersion = _a.apiVersion, _b = _a.deliveryMethod, deliveryMethod = _b === void 0 ? DeliveryMethod.Http : _b;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var response, result;
        var _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, fetch("https://" + shop + "/admin/api/" + apiVersion + "/graphql.json", {
                        method: network_1.Method.Post,
                        body: buildQuery(topic, address, deliveryMethod),
                        headers: (_c = {},
                            _c[types_1.WebhookHeader.AccessToken] = accessToken,
                            _c[network_1.Header.ContentType] = 'application/graphql',
                            _c),
                    })];
                case 1:
                    response = _d.sent();
                    return [4 /*yield*/, response.json()];
                case 2:
                    result = _d.sent();
                    return [2 /*return*/, { success: isSuccess(result, deliveryMethod), result: result }];
            }
        });
    });
}
exports.registerWebhook = registerWebhook;
function isSuccess(result, deliveryMethod) {
    switch (deliveryMethod) {
        case DeliveryMethod.Http:
            return Boolean(result.data &&
                result.data.webhookSubscriptionCreate &&
                result.data.webhookSubscriptionCreate.webhookSubscription);
        case DeliveryMethod.EventBridge:
            return Boolean(result.data &&
                result.data.eventBridgeWebhookSubscriptionCreate &&
                result.data.eventBridgeWebhookSubscriptionCreate.webhookSubscription);
    }
}
function buildQuery(topic, address, deliveryMethod) {
    var mutationName;
    var webhookSubscriptionArgs;
    switch (deliveryMethod) {
        case DeliveryMethod.Http:
            mutationName = 'webhookSubscriptionCreate';
            webhookSubscriptionArgs = "{callbackUrl: \"" + address + "\"}";
            break;
        case DeliveryMethod.EventBridge:
            mutationName = 'eventBridgeWebhookSubscriptionCreate';
            webhookSubscriptionArgs = "{arn: \"" + address + "\"}";
            break;
    }
    return "\n    mutation webhookSubscriptionCreate {\n      " + mutationName + "(topic: " + topic + ", webhookSubscription: " + webhookSubscriptionArgs + ") {\n        userErrors {\n          field\n          message\n        }\n        webhookSubscription {\n          id\n        }\n      }\n    }\n  ";
}
