"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var crypto_1 = require("crypto");
var safe_compare_1 = tslib_1.__importDefault(require("safe-compare"));
var koa_bodyparser_1 = tslib_1.__importDefault(require("koa-bodyparser"));
var koa_mount_1 = tslib_1.__importDefault(require("koa-mount"));
var koa_compose_1 = tslib_1.__importDefault(require("koa-compose"));
var network_1 = require("@shopify/network");
var types_1 = require("./types");
function receiveWebhook(_a) {
    var secret = _a.secret, path = _a.path, _b = _a.onReceived, onReceived = _b === void 0 ? noop : _b;
    function receiveWebhookMiddleware(ctx, next) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var hmac, topic, domain, rawBody, generatedHash, graphqlTopic;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hmac = ctx.get(types_1.WebhookHeader.Hmac);
                        topic = ctx.get(types_1.WebhookHeader.Topic);
                        domain = ctx.get(types_1.WebhookHeader.Domain);
                        rawBody = ctx.request.rawBody;
                        generatedHash = crypto_1.createHmac('sha256', secret)
                            .update(rawBody, 'utf8')
                            .digest('base64');
                        graphqlTopic = topic.toUpperCase().replace(/\//g, '_');
                        if (!safe_compare_1.default(generatedHash, hmac)) return [3 /*break*/, 3];
                        ctx.res.statusCode = network_1.StatusCode.Accepted;
                        ctx.state.webhook = {
                            topic: graphqlTopic,
                            domain: domain,
                            payload: JSON.parse(rawBody),
                        };
                        return [4 /*yield*/, onReceived(ctx)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, next()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        ctx.res.statusCode = network_1.StatusCode.Forbidden;
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    }
    var middleware = koa_compose_1.default([koa_bodyparser_1.default(), receiveWebhookMiddleware]);
    return path ? koa_mount_1.default(path, middleware) : middleware;
}
exports.receiveWebhook = receiveWebhook;
function noop() { }
